#version 450
#extension GL_KHR_vulkan_glsl : enable

// clang-format off
const uint Air         = 0;
const uint Brick       = 1;
const uint Cactus      = 2;
const uint Cobblestone = 3;
const uint DiamondOre  = 4;
const uint Dirt        = 5;
const uint DriedShrub  = 6;
const uint Grass       = 7;
const uint Gravel      = 8;
const uint Leaves      = 9;
const uint Log         = 10;
const uint Planks      = 11;
const uint Rose        = 12;
const uint Sand        = 13;
const uint Sandstone   = 14;
const uint Stone       = 15;
const uint TallGrass   = 16;
const uint Water       = 17;
// clang-format on

layout(local_size_x = 16, local_size_y = 16) in;

const uint Chunk_NX = 16;
const uint Chunk_NY = 16;
const uint Chunk_NZ = 16;
layout(set = 0, binding = 0) buffer chunk_buffer {
    uint blocks[16 * 16 * 16];
};
layout(push_constant) uniform Push {
    vec3 pos;
}
p;

bool is_transparent(uint id) {
    switch (id) {
    case Air:
    case DriedShrub:
    case Leaves:
    case Rose:
    case TallGrass:
        return true;
    default: return false;
    }
}

void main() {
    uint xi = gl_LocalInvocationID.x;
    uint yi = gl_LocalInvocationID.y;
    uint zi = gl_WorkGroupID.z;
    
    uint block_index = zi + yi * Chunk_NX + xi * Chunk_NX * Chunk_NY;
    vec3 block_pos = vec3(xi, yi, zi) + p.pos * vec3(Chunk_NX, Chunk_NY, Chunk_NZ);

    uint current_block_id = blocks[block_index];

    uint above_ids[16] = uint[16](0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    uint below_ids[16] = uint[16](0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    uint above_n = min(16, 16 - yi);
    uint below_n = min(16, yi);
    uint above_depth = 16;
    uint below_depth = 16;

    for (uint i = 1; i < above_n; ++i) {
        uint id = blocks[zi + (yi + i) * Chunk_NX + xi * Chunk_NX * Chunk_NY];
        above_ids[i] = id;
    }
    for (uint i = 1; i < below_n; ++i) {
        uint id = blocks[zi + (yi + i) * Chunk_NX + xi * Chunk_NX * Chunk_NY];
        below_ids[i] = id;
    }

    for (uint i = 1; i < above_n; ++i) {
        uint above_id = above_ids[i];
        if (is_transparent(above_id)) {
            above_depth = i;
            break;
        }
    }
    
    for (uint i = 1; i < below_n; ++i) {
        uint below_id = below_ids[i];
        if (is_transparent(below_id)) {
            below_depth = i;
            break;
        }
    }

    if (current_block_id == Stone) {
        if (above_depth == 1) {
            blocks[block_index] = Grass;
        } else if (above_depth < 4) {
            blocks[block_index] = Dirt;
        }
    } else if (current_block_id == Air) {
        // if (below_n > 1) {
        //     blocks[block_index] = TallGrass;
        // }
    }
}
