#version 450
#extension GL_KHR_vulkan_glsl : enable

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 1, binding = 0) uniform Globals {
    mat4 inverse_view;
    ivec2 size;
    float near;
    float far;
} globals;

layout (set = 1, binding = 1) uniform sampler2D in_depth;
layout (set = 1, binding = 2, rgba8) uniform writeonly image2D out_depth;
layout (set = 1, binding = 3) uniform sampler2D in_normal;
layout (set = 1, binding = 4, rgba8) uniform writeonly image2D out_view_space_normal;
layout (set = 1, binding = 5, rgba8) uniform writeonly image2D out_world_space_normal;

void main() {
	if (gl_GlobalInvocationID.x < globals.size.x && gl_GlobalInvocationID.y < globals.size.y) {
        float depth = texture(in_depth, vec2(0,0)).x;
        float z = 2.0 * globals.near * globals.far / (globals.far + globals.near - depth * (globals.far - globals.near));
        imageStore(out_depth, ivec2(0,0), vec4(z,z,z,1));

        vec2 screen_space_normal_xy = texture(in_normal, vec2(0,0)).xy;

        vec4 screen_space_normal_color = vec4((screen_space_normal_xy + vec2(1,1)) * 0.5f, 1, 1);
        imageStore(out_view_space_normal, ivec2(0,0), screen_space_normal_color);

        float screen_space_normal_z_component = sqrt(1 - screen_space_normal_xy.x * screen_space_normal_xy.x - screen_space_normal_xy.y * screen_space_normal_xy.y);
        vec3 screen_space_normal = vec3(screen_space_normal_xy, screen_space_normal_z_component);

        vec3 world_space_normal = (globals.inverse_view * vec4(screen_space_normal, 0)).xyz;
        vec4 world_space_normal_color = vec4((world_space_normal + vec3(1,1,1)) * 0.5f,1);
        imageStore(out_world_space_normal, ivec2(0,0), world_space_normal_color);
    }
}