#version 450
#extension GL_KHR_vulkan_glsl : enable

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0) uniform Globals {
    mat4 inverse_view;
    mat4 inverseTransposeVP;
    float near;
    float far;
    ivec2 size;
    float zMin;
    float zMax;
} globals;

layout (set = 0, binding = 1) uniform sampler2D in_depth;
layout (set = 0, binding = 2) uniform sampler2D in_normal;
layout (set = 0, binding = 3, rgba8) uniform writeonly image2D out_depth;
layout (set = 0, binding = 4, rgba8) uniform writeonly image2D outScreenSpaceNormal;
layout (set = 0, binding = 5, rgba8) uniform writeonly image2D out_world_space_normal;

void main() {
	if (gl_GlobalInvocationID.x < globals.size.x && gl_GlobalInvocationID.y < globals.size.y) {
        ivec2 icoord = ivec2(gl_GlobalInvocationID.xy);
        vec2 coord = vec2(gl_GlobalInvocationID.xy) / vec2(globals.size);
        float depth = texture(in_depth, coord).x;
        float z = 2.0 * globals.near * globals.far / (globals.far + globals.near - depth * (globals.far - globals.near));
        z = clamp(z, globals.zMin, globals.zMax);
        float normalized_z = (z - globals.zMin) / (globals.zMax - globals.zMin);
        imageStore(out_depth, icoord, vec4(normalized_z,normalized_z,normalized_z,1));

        vec3 normalFetch = texture(in_normal, coord).rgb;
        if (normalFetch != vec3(0)) {
            vec3 world_space_normal = normalFetch * 2.0f - 1.0f;
            vec4 world_space_normal_color = vec4((world_space_normal + vec3(1,1,1)) * 0.5f, 1.0f);
            world_space_normal_color.x = pow(world_space_normal_color.x, 2.2);
            world_space_normal_color.y = pow(world_space_normal_color.y, 2.2);
            world_space_normal_color.z = pow(world_space_normal_color.z, 2.2);
            imageStore(out_world_space_normal, icoord, world_space_normal_color);

            vec3 screenSpaceNormal = (globals.inverseTransposeVP * vec4(world_space_normal,0.0f)).xyz;
            vec4 screenSpaceNormalColor = vec4((screenSpaceNormal + vec3(1,1,1)) * 0.5f, 1.0f);

            screenSpaceNormalColor.x = pow(screenSpaceNormalColor.x, 2.2);
            screenSpaceNormalColor.y = pow(screenSpaceNormalColor.y, 2.2);
            screenSpaceNormalColor.z = pow(screenSpaceNormalColor.z, 2.2);
            imageStore(outScreenSpaceNormal, icoord, screenSpaceNormalColor);
        } else {
            imageStore(out_world_space_normal, icoord, vec4(0));
            imageStore(outScreenSpaceNormal, icoord, vec4(0));
        }
    }
}